@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Places Explorer Map</title>
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.8.2/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.8.2/mapbox-gl.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

</head>
<body>
    <div class="explorer">
        <div id="map" class="explorer-map"></div>
        <div class="explorer--text">
            <input type="text"
                   class="explorer--search explorer--background-icon explorer--text"
                   id="explorer-search"
                   placeholder="Buscar" />
            <div id="explorer-dropdown">
                <ul id="explorer-suggestions"></ul>
                <div id="explorer-error" class="explorer--error explorer--background-icon">
                    No existen registros con tu criterio de busqueda.
                </div>
                
                <div id="explorer-not-found" class="explorer--error explorer--background-icon"></div>
                <div class="explorer--copyright">
                    <img src="https://files.readme.io/7835fdb-powerByFSQ.svg" alt="powered by foursquare" />
                </div>
            </div>
        </div>
        <button class="explorer--error explorer--background-icon" id="mostrarBoton" onclick="removeMarkers()">Eliminar Marcadores</button>
    </div>
    <br />
    <!-- Modal de éxito -->
    <div id="successModal" class="modal">
        <div class="modal-content">
            <span class="close-btn">&times;</span>
            <p id="successMessage"></p>
        </div>
    </div>
</body>
</html>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function loadLocalMapSearchJs() {
            mapboxgl.accessToken = 'pk.eyJ1IjoiZmFpbHVyaWVzIiwiYSI6ImNtM2JhZG8xcTFtYWcyaXB6eWloM2Y1a20ifQ.iHC_1i1IH8G-l5bg3xrpTw';
            const fsqAPIToken = 'fsq38Qf8zd4mcVOcuegTNGhsErxUBnYRYwJcKj83M57AXgo=';
            let userLat = 40.7128;
            let userLng = -74.0060;
            let sessionToken = generateRandomSessionToken();
            const inputField = document.getElementById('explorer-search');
            const dropDownField = document.getElementById('explorer-dropdown');
            const ulField = document.getElementById('explorer-suggestions');
            const errorField = document.getElementById('explorer-error');
            const mostrarBoton = document.getElementById('mostrarBoton');
            const notFoundField = document.getElementById('explorer-not-found');

            const onChangeAutoComplete = debounce(changeAutoComplete);
            inputField.addEventListener('input', onChangeAutoComplete);
            ulField.addEventListener('click', selectItem);

            function success(pos) {
                const { latitude, longitude } = pos.coords;
                userLat = latitude;
                userLng = longitude;
                flyToLocation(userLat, userLng);
            }

            function logError(err) {
                console.warn(`ERROR(${err.code}): ${err.message}`);
            }

            navigator.geolocation.getCurrentPosition(success, logError, {
                enableHighAccuracy: true,
                timeout: 5000,
                maximumAge: 0,
            });

            const map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/light-v10',
                center: [userLng, userLat],
                zoom: 12,
            });

            map.addControl(new mapboxgl.GeolocateControl());
            map.addControl(new mapboxgl.NavigationControl());

            let currentMarker;

            /* Generate a random string with 32 characters.
               Session Token is a user-generated token to identify a session for billing purposes.
               Learn more about session tokens.
               https://docs.foursquare.com/reference/session-tokens
            */
            function generateRandomSessionToken(length = 32) {
                let result = '';
                const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
                for (let i = 0; i < length; i++) {
                    result += characters[Math.floor(Math.random() * characters.length)];
                }
                return result;
            }

            let isFetching = false;
            async function changeAutoComplete({ target }) {
                const { value: inputSearch = '' } = target;
                
                ulField.innerHTML = '';
                notFoundField.style.display = 'none';
                errorField.style.display = 'none';

                if (inputSearch.length && !isFetching) {
                    try {
                        isFetching = true;
                        const nombres = consultar(inputSearch);
                        //const nombres = ['cafe', 'restaurante', 'bar', 'panadería', 'tienda'];
                        if (nombres.includes(inputSearch)) {
                            const results = await busquedaGeneral(inputSearch);
                            if (results && results.length > 0) {
                                for (let i = 0; i < results.length; i++) {
                                    const value = results[i];
                                    value.search = inputSearch;
                                    addItemGeneral(value);
                                    break;
                                }
                            } else {
                                notFoundField.innerHTML = `Foursquare can't
                                find ${inputSearch}. Make sure your search is spelled correctly.
                                <a href="https://foursquare.com/add-place?ll=${userLat}%2C${userLng}&venuename=${inputSearch}"
                                  target="_blank" rel="noopener noreferrer">Don't see the place you're looking for?</a>.`;
                                
                            }
                        }
                        else {
                            const results = await autoComplete(inputSearch);
                            if (results && results.length > 0) {
                                results.forEach((value) => {
                                    addItem(value);
                                });
                            } else {
                                notFoundField.innerHTML = `Foursquare can't
                                find ${inputSearch}. Make sure your search is spelled correctly.
                                <a href="https://foursquare.com/add-place?ll=${userLat}%2C${userLng}&venuename=${inputSearch}"
                                  target="_blank" rel="noopener noreferrer">Don't see the place you're looking for?</a>.`;
                                notFoundField.style.display = 'block';
                            }
                        }
                    } catch (err) {
                        errorField.style.display = 'block';
                        logError(err);
                    } finally {
                        isFetching = false;
                        dropDownField.style.display = 'block';
                    }
                } else {
                    dropDownField.style.display = 'none';
                }
            }

            async function autoComplete(query) {
                const { lng, lat } = map.getCenter();
                userLat = lat;
                userLng = lng;
                try {
                    const searchParams = new URLSearchParams({
                        query,
                        types: 'place',
                        ll: `${userLat},${userLng}`,
                        radius: 50000,
                        session_token: sessionToken,
                    }).toString();
                    const searchResults = await fetch(
                        `https://api.foursquare.com/v3/autocomplete?${searchParams}`,
                        {
                            method: 'get',
                            headers: new Headers({
                                Accept: 'application/json',
                                Authorization: fsqAPIToken,
                            }),
                        }
                    );
                    const data = await searchResults.json();
                    return data.results;
                } catch (error) {
                    throw error;
                }
            }

            function addItem(value) {
                const placeDetail = value[value.type];
                if (!placeDetail || !placeDetail.geocodes || !placeDetail.geocodes.main) return;
                const { latitude, longitude } = placeDetail.geocodes.main;
                const fsqId = placeDetail.fsq_id;
                const dataObject = JSON.stringify({ latitude, longitude, fsqId });
                const nombres = ['cafe', 'restaurante', 'bar', 'panadería', 'tienda'];
                if (nombres.includes(value)) {
                    // Si la condición es verdadera, agrega la etiqueta de manera dinámica
                    ulField.innerHTML += `
                    <li class="explorer--dropdown-item" data-object='${dataObject}'>
                              <div>${nombres}</div>
                      <div class="explorer--secondary-text">${value.text.secondary}</div>
                    </li>`;
                } else {
                    // Versión original que usa highlightedNameElement
                    ulField.innerHTML +=
                        `<li class="explorer--dropdown-item" data-object='${dataObject}'>
                        <div>${highlightedNameElement(value.text)}</div>
                        <div class="explorer--secondary-text">${value.text.secondary}</div>
                      </li>`;
                }
            }

            function addItemGeneral(value) {
             
                let search = value.search;
                // Buscar si el valor contiene alguna de las palabras de la lista
                ulField.innerHTML += `
                            <li class="explorer--dropdown-item" data-object='${value.fsq_id}'>
                    <i class="fas fa-utensils"></i> <!-- Icono de tenedor y cuchillo -->
                            <div>${search}</div>
                    </li>`;

                    
            }

            async function selectItem({ target }) {
                if (target.tagName === 'LI') {
                    //const valueObject = JSON.parse(target.dataset.object);
                    //const { latitude, longitude, fsqId } = valueObject;
                    console.log(target.children[0].textContent); // Verifica el texto que se va a asignar
                    const detallesGenerales = await busquedaGeneral(inputField.value);
                    detallesGenerales.forEach(detalle => {
                        let latitude = detalle.geocodes.main.latitude;
                        let longitude = detalle.geocodes.main.longitude;
                        addMarkersFromPlaceDetail(latitude, longitude, detalle)
                    });
                    //const placeDetail = await fetchPlacesDetails(fsqId);
                    //addMarkerAndPopup(latitude, longitude, placeDetail);
                    flyToLocation(userLat, userLng);

                    // generate new session token after a complete search
                    sessionToken = generateRandomSessionToken();
                    const name = target.dataset.name;
                    inputField.value = target.children[0].textContent;
                    dropDownField.style.display = 'none';
                }
            }

            async function fetchPlacesDetails(fsqId) {
                try {
                    const searchParams = new URLSearchParams({
                        fields: 'fsq_id,name,geocodes,location,photos,rating',
                        session_token: sessionToken,
                    }).toString();
                    const results = await fetch(
                        `https://api.foursquare.com/v3/places/${fsqId}?${searchParams}`,
                        {
                            method: 'get',
                            headers: new Headers({
                                Accept: 'application/json',
                                Authorization: fsqAPIToken,
                            }),
                        }
                    );
                    const data = await results.json();
                    return data.results;
                } catch (err) {
                    logError(err);
                }
            }



            async function busquedaGeneral(inputField) {
                try {
                    const pos = await new Promise((resolve, reject) => {
                        if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(resolve, reject);
                        } else {
                            reject('La geolocalización no es soportada por este navegador.');
                        }
                    });
                    const { latitude, longitude } = pos.coords; // Desestructuración para obtener latitud y longitud
                    userLat = latitude;
                    userLng = longitude;

                    const searchParams = new URLSearchParams({
                        fields: 'fsq_id,name,geocodes,location,photos,rating',
                        session_token: sessionToken,
                    }).toString();
                    const consultarGeneral = await fetch(
                        `https://api.foursquare.com/v3/places/search?query=${inputField}&ll=${userLat}%2C${userLng}`,
                        {
                            method: 'get',
                            headers: new Headers({
                                Accept: 'application/json',
                                Authorization: fsqAPIToken,
                            }),
                        }
                    );
                    const data = await consultarGeneral.json();
                    return data.results;
                } catch (err) {
                    logError(err);
                }
            }

            function createPopup(placeDetail) {
                const { location = {}, name = '', photos = [], rating } = placeDetail;
                let photoUrl = 'https://files.readme.io/c163d6e-placeholder.svg';
                if (photos.length && photos[0]) {
                    photoUrl = `${photos[0].prefix}56${photos[0].suffix}`;
                }
                const popupHTML = `<div class="explorer--popup explorer--text">
                    <image class="explorer--popup-image" src="${photoUrl}" alt="photo of ${name}"/>
                    <div class="explorer--popup-description">
                      <div class="explorer--bold">${name}</div>
                      <div class="explorer--secondary-text">${location.address}</div>
                    </div>
                    ${rating ? `<div class="explorer--popup-rating">${rating}</div>` : `<div />`}
                  </div>`;

                const markerHeight = 35;
                const markerRadius = 14;
                const linearOffset = 8;
                const verticalOffset = 8;
                const popupOffsets = {
                    top: [0, verticalOffset],
                    'top-left': [0, verticalOffset],
                    'top-right': [0, verticalOffset],
                    bottom: [0, -(markerHeight + verticalOffset)],
                    'bottom-left': [0, (markerHeight + verticalOffset - markerRadius + linearOffset) * -1],
                    'bottom-right': [0, (markerHeight + verticalOffset - markerRadius + linearOffset) * -1],
                    left: [markerRadius + linearOffset, (markerHeight - markerRadius) * -1],
                    right: [-(markerRadius + linearOffset), (markerHeight - markerRadius) * -1],
                };
                return new mapboxgl.Popup({
                    offset: popupOffsets,
                    closeButton: false,
                }).setHTML(popupHTML);
            }

            function createPopupDetalle(placeDetail) {
                const { location = {}, name = '', photos = [], rating } = placeDetail;
                let photoUrl = 'https://files.readme.io/c163d6e-placeholder.svg';
                if (photos.length && photos[0]) {
                    photoUrl = `${photos[0].prefix}56${photos[0].suffix}`;
                }
                console.log(JSON.stringify(placeDetail, null, 2));
                const popupHTML = `<div class="explorer--popup explorer--text">
                            <image class="explorer--popup-image" src="${photoUrl}" alt="photo of ${name}"/>
                            <div class="explorer--popup-description">
                              <div class="explorer--bold">${name}</div>
                              <div class="explorer--secondary-text">${location.address}</div>
                            </div>
                            
                <div class="explorer--save-icon">
                <button class="save-button" onclick="saveMarkerInfo('${encodeURIComponent(JSON.stringify(placeDetail))}')">
                                <i class="fas fa-plus"></i>
                    </button>
                </div>

                          </div>`;
                mostrarBoton.style.display = 'block';
                const markerHeight = 35;
                const markerRadius = 14;
                const linearOffset = 8;
                const verticalOffset = 8;
                const popupOffsets = {
                    top: [0, verticalOffset],
                    'top-left': [0, verticalOffset],
                    'top-right': [0, verticalOffset],
                    bottom: [0, -(markerHeight + verticalOffset)],
                    'bottom-left': [0, (markerHeight + verticalOffset - markerRadius + linearOffset) * -1],
                    'bottom-right': [0, (markerHeight + verticalOffset - markerRadius + linearOffset) * -1],
                    left: [markerRadius + linearOffset, (markerHeight - markerRadius) * -1],
                    right: [-(markerRadius + linearOffset), (markerHeight - markerRadius) * -1],
                };
                return new mapboxgl.Popup({
                    offset: popupOffsets,
                    closeButton: false,
                }).setHTML(popupHTML);
            }


            markers = [];
            function addMarkerAndPopup(lat, lng, placeDetail) {
                currentMarker = new mapboxgl.Marker({
                    color: '#3333FF',
                })
                    .setLngLat([lng, lat])
                    .setPopup(createPopupDetalle(placeDetail))
                    .addTo(map);
                markers.push(currentMarker);
                //currentMarker.togglePopup();
            }

            function addMarkersFromPlaceDetail(lat, lng, detallesGenerales) {
                
                let latitude = detallesGenerales.geocodes.main.latitude;
                let longitude = detallesGenerales.geocodes.main.longitude;
                addMarkerAndPopup(latitude, longitude, detallesGenerales);
                
                // // Iterar sobre la lista de objetos 'placeDetail'
                // detallesGenerales.forEach(detalle => {
                //     let latitude = detalle.geocodes.main.latitude;
                //     let longitude = detalle.geocodes.main.longitude;
                //     addMarkerAndPopup(latitude, longitude, detalle);
                // });
            }

            function flyToLocation(lat, lng) {
                map.flyTo({
                    center: [lng, lat],
                });
            }

            function consultar(nombre) {
                const nombres = [
                    'cafe',
                    'restaurante',
                    'bar',
                    'panadería',
                    'tienda',
                    'pizzería',
                    'hamburguesería',
                    'sushi',
                    'pastelería',
                    'heladería',
                    'comida rápida',
                    'mercado',
                    'supermercado',
                    'tienda de comestibles',
                    'ferretería',
                    'farmacia',
                    'bazar',
                    'librería',
                    'ropa',
                    'zapatería',
                    'joyería',
                    'tienda de electrónica',
                    'tienda de ropa',
                    'tienda de deportes',
                    'tienda de juguetes',
                    'tienda de tecnología',
                    'tienda de muebles',
                    'tienda de mascotas',
                    'restaurante',
                    'restaurantes',
                    'cafetería',
                    'bar de vinos',
                    'cervecería',
                    'pub',
                    'centro comercial',
                    'plaza',
                    'bar de copas',
                    'tienda de té',
                    'tienda de café',
                    'restaurante de sushi',
                    'comida asiatica',
                    'comida italiana',
                    'comida mexicana',
                    'comida rápida',
                    'comida gourmet',
                    'comida orgánica',
                    'fast food',
                    'restaurante de comida rápida',
                    'restaurante de mariscos',
                    'comida mediterránea',
                    'comida india',
                    'comida turca',
                    'comida árabe',
                    'comida americana',
                    'comida fusión',
                    'pescadería',
                    'carnicería',
                    'charcutería',
                    'tienda de vinos',
                    'tienda de licores',
                    'tienda de regalos',
                    'florería',
                    'tienda de artículos para el hogar',
                    'peluquería',
                    'salón de belleza',
                    'spa',
                    'tacos',
                    'Tacos',
                    'gimnasio',
                    'tienda de cosméticos',
                    'tienda de tecnología',
                    'tienda de relojes',
                    'tienda de deportes',
                    'estanco',
                    'tintorería',
                    'lavandería',
                    'sastrería',
                    'tienda de segunda mano',
                    'tienda de antigüedades',
                    'galería de arte',
                    'estudio fotográfico',
                    'coctelería',
                    'lounge',
                    'parque',
                    'biblioteca',
                    'centro comercial',
                    'tienda online',
                    'tienda de electrónica',
                    'tienda de informática',
                    'tienda de smartphones',
                    'tienda de accesorios',
                    'tienda de videojuegos',
                    'tienda de cámaras'
                ];
                if (nombres.includes(nombre)) {
                    return nombre; 
                } else {
                    return null; 
                }
            }

            function highlightedNameElement(textObject) {
                if (!textObject) return '';
                const { primary, highlight } = textObject;
                if (highlight && highlight.length) {
                    let beginning = 0;
                    let hightligtedWords = '';
                    for (let i = 0; i < highlight.length; i++) {
                        const { start, length } = highlight[i];
                        hightligtedWords += primary.substr(beginning, start - beginning);
                        hightligtedWords += '<b>' + primary.substr(start, length) + '</b>';
                        beginning = start + length;
                    }
                    hightligtedWords += primary.substr(beginning);
                    return hightligtedWords;
                }
                return primary;
            }

            function debounce(func, timeout = 300) {
                let timer;
                return (...args) => {
                    clearTimeout(timer);
                    timer = setTimeout(() => {
                        func.apply(this, args);
                    }, timeout);
                };
            }
        }

        loadLocalMapSearchJs();
    </script>

    <script>
        function saveMarkerInfo(placeDetailString) {

            const placeDetail = JSON.parse(decodeURIComponent(placeDetailString));
            console.log(JSON.stringify(placeDetail, null, 2));

            const markerData = {
                fsqId: placeDetail.fsq_id,
                nombre: placeDetail.name,
                formattedAddress: placeDetail.location.formatted_address,
                fechaRegistro: new Date().toISOString(), 
                activo: true, 
                foto: 'http://example.com/photo.jpg',
                rating: 9
            };
            // console.log(JSON.stringify(markerData, null, 2));

            const popupElement = document.querySelector('.mapboxgl-popup');
            if (popupElement) {

                popupElement.remove();
            }
            fetch('/Restaurantes/SaveMarker', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(markerData)
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Información guardada con éxito', data);
                    showModal(data.message);
                })
                .catch(error => {
                    console.error('Error al guardar la información', error);
                });
        }

        function showModal(message) {
            const modal = document.getElementById("successModal");
            const successMessage = document.getElementById("successMessage");
            successMessage.textContent = message;
            modal.style.display = "block";

            
            const closeButton = document.querySelector(".close-btn");
            closeButton.onclick = function () {
                modal.style.display = "none";
            }

            
            window.onclick = function (event) {
                if (event.target === modal) {
                    modal.style.display = "none";
                }
            }

            
            setTimeout(function () {
                modal.style.display = "none";
            }, 3000); 
        }
    </script>

    <script>
        function removeMarkers() {
            markers.forEach(marker => {
                marker.remove();
            });
            const mostrarBoton = document.getElementById('mostrarBoton');
            mostrarBoton.style.display = 'none';
        }
    </script>
}
